#include "mainwindow.h"
#include "./ui_mainwindow.h"
#include "QTextEdit"
#include <stdio.h>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->radioButton_Shifr_Stolb->setChecked(true);
    ui->radioButton_Shifr_Stolb_f->setChecked(true);
}

MainWindow::~MainWindow()
{
    delete ui;
}
QString text_st = "";
QString encryption_st = "";
QString key_st= "";
QString text_st_f = "";
QString encryption_st_f = "";
QString key_st_f = "";
FILE *file;
void MainWindow::MakeStr(QString str, QString *strToMake, uint64_t str_len) {
    for (int i = 0; i < str_len; i++)
        if (IsValidSymbol(str[i], false))
            (*strToMake) += str[i];
    (*strToMake) = (*strToMake).toUpper();
}
bool MainWindow::Column_Improved(uint64_t text_len, uint64_t key_len, QString *textSt, QString *keySt, QString *encryptionSt){
    QString true_text = "", true_key = "";
    MakeStr((*textSt), &true_text, text_len);
    MakeStr((*keySt), &true_key, key_len);
    int tt_length = true_text.length();
    int tk_length = true_key.length();
    if (tk_length != 0 && tt_length != 0) {
        int arr_ind[tk_length];
        for (int i = 0; i < tk_length; i++)
            arr_ind[i] = -1;
        for (int i = 0; i < tk_length; i++) {
            int min = findMin(true_key, arr_ind, tk_length);
            arr_ind[i] = min;
        }
        int i = 0;
        int Rows = 0;
        int ind = 0;
        while (i < tt_length) {
            Rows++;
            i += arr_ind[ind] + 1;
            if (ind < tk_length - 1)
                ind++;
            else
                ind = 0;
        }
        QString matrix[Rows][tk_length];
        ind = 0;
        i = 0;
        while (i < tt_length) {
            for (int j = 0; j <= arr_ind[ind % tk_length] && i < tt_length; j++)
                matrix[ind][j] = true_text[i++];
            ind++;
        }
        for (ind = 0; ind < tk_length; ind++)
            for (int j = 0; j < Rows; j++)
                if (matrix[j][arr_ind[ind]] != "")
                    (*encryptionSt) += matrix[j][arr_ind[ind]];
        /*for (int i = 0; i < 148; i++)
            for (int j = 0; j < 8; j++) {
                (*encryptionSt) += matrix[i][j];
            }
        i = 0;
        while ((*encryptionSt)[i] == true_text[i] && i < tt_length) {
            i++;
        }*/
        int j = 0;
        for (i = 0; i < text_len; i++) {
            if (IsValidSymbol((*textSt)[i], false)) {
                if (j < tt_length)
                    (*textSt)[i] = (*encryptionSt)[j];
                j++;
            };
        }
        return true;
    }
    return false;
}

int MainWindow::IsValidSymbol(QChar symbol, bool lang) {
    if (!lang) {
        for (int i = 65; i < 91; i++)
            if (QChar(i) == symbol)
                return i;
        for (int i = 97; i < 123; i++)
            if (QChar(i) == symbol)
                return i;
    }
    else {
        for (int i = 1040; i < 1104; i++)
            if (QChar(i) == symbol)
                return i;
        if (QChar(1025) == symbol)
            return 1025;
        if (QChar(1105) == symbol)
            return 1105;
    }
    return 0;
}
bool MainWindow::IsUsed(int arr[], int ind, int len) {
    int i = 0;
    while (i < len && arr[i] != -1) {
        if (ind == arr[i])
            return true;
        i++;
    }
    return false;
}
int MainWindow::findMin(QString str, int arr[], int len) {
    if (len > 0) {
        int min = -1;
        QChar min_ch = QChar(1200);
        for (int i = len - 1; i >= 0; i--)
            if (!IsUsed(arr, i, len))
                if (min_ch >= str[i]) {
                    min_ch = str[i];
                    min = i;
                }
        return min;
    }
    return -1;
}

void MainWindow::on_pushButton_Stolb_clicked()
{
    uint64_t text_len = ui->textEdit_Stolb->toPlainText().length();
    uint64_t key_len = ui->textEdit_Stolb_Key->toPlainText().length();
    if (key_len != 0 && text_len != 0) {
        text_st = ui->textEdit_Stolb->toPlainText();
        key_st = ui->textEdit_Stolb_Key->toPlainText();
        encryption_st = "";
        if (Column_Improved(text_len, key_len, &text_st, &key_st, &encryption_st)) {
            if (ui->radioButton_Shifr_Stolb->isChecked())
                ui->textEdit_Stolb_Cypher->setText(encryption_st);
            else
                ui->textEdit_Stolb_Cypher->setText(text_st);
        }
    }
    //ui->label_Stolb_Cypher->setText(encryption);
   /* QString asciiTable;
    for (int i = 97; i < 123; i++) {
        asciiTable += QString("Символ: %1\tКод: %2\n").arg(QChar(i)).arg(i);
    }
    for (int i = 65; i < 91; i++) {
        asciiTable += QString("Символ: %1\tКод: %2\n").arg(QChar(i)).arg(i);
    }
    for (int i = 1072; i < 1104; i++) {
        asciiTable += QString("Символ: %1\tКод: %2\n").arg(QChar(i)).arg(i);
        if (i == 1077) {
            asciiTable += QString("Символ: %1\tКод: %2\n").arg(QChar(1105)).arg(1105);
        }
    }
    for (int i = 1040; i < 1072; i++) {
        asciiTable += QString("Символ: %1\tКод: %2\n").arg(QChar(i)).arg(i);
        if (i == 1045) {
            asciiTable += QString("Символ: %1\tКод: %2\n").arg(QChar(1025)).arg(1025);
        }
    }
    ui->textEdit_Stolb_Cypher->setText(asciiTable);   */      //QString::number(len)
}

void MainWindow::fileWrite(QString str) {
    QByteArray byteArray = str.toUtf8();
    const char *text_st_f_char = byteArray.constData();
    file = fopen("TextFile.txt", "w");
    fprintf(file, "%s", text_st_f_char);
    fclose(file);
}

void MainWindow::on_pushButton_Stolb_File_clicked()
{
    file = fopen("TextFile.txt", "r");
    char str[2048];
    text_st_f = "";
    while (fgets(str, 2048, file) != NULL) {
        text_st_f += str;
    }
    fclose(file);

    encryption_st_f = "";
    key_st_f = ui->textEdit_Stolb_Key->toPlainText();
    uint64_t text_len = text_st_f.length();
    uint64_t key_len = key_st_f.length();
    if (key_len != 0 && text_len != 0) {
        if (Column_Improved(text_len, key_len, &text_st_f, &key_st_f, &encryption_st_f)) {
            if (!ui->radioButton_All_Stolb_f->isChecked())
                fileWrite(encryption_st_f);
            else
                fileWrite(text_st_f);
        }
    }
}
/*
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc nec nisi ultricies, hendrerit ex in, vestibulum lectus.
Quisque eu felis purus.
Sed sit amet ultrices risus.
Vivamus non erat vel libero ultricies scelerisque.
Vestibulum at dolor quis orci rhoncus interdum.
Etiam nec tortor ut justo aliquet vehicula.
Mauris vitae enim sit amet enim interdum ultricies.
In at libero sed nunc consequat ultricies.
Sed ac tristique libero, nec lobortis felis.
Fusce congue metus nec lacinia fermentum.
Cras eget suscipit elit. Integer scelerisque vel eros nec hendrerit.
Phasellus vel sem eu lectus malesuada dignissim.
Nam vestibulum, mauris nec euismod faucibus, sapien nulla finibus felis, nec bibendum ligula justo non arcu.
Duis sed risus vel libero ultrices convallis.Mauris sit amet neque ut ex tristique ultricies.
*/
